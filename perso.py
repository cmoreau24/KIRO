from numpy import random

import json
import numpy as np


with open('large_1.json', 'r') as file:
    data = json.load(file)

vehicles = {}
for i in range(len(data["vehicles"])):
    vehicles[i+1] = data["vehicles"][i]["type"]

constraints = []
for i in range(len(data["constraints"])):
    constraints.append(data["constraints"][i])

lag = {}
for i in range(len(data["shops"])):
    lag[data["shops"][i]["name"]] = data["shops"][i]["resequencing_lag"]


parameters = data["parameters"]
#print(constraints)

def lot_change_cost(C,L_body,L_paint,L_assembly):
    for constraint in constraints :
        if constraint['shop']=="body":
            L=L_body
        elif constraint['shop']=="paint":
            L=L_paint
        else:
            L=L_assembly
        if constraint["type"] == "lot_change": #pour chaque lot l
            D = {}
            c_l = constraint["cost"]
            for t in range(len(L)):#pour chaque vÃ©hicule
                v = L[t]
                list = []
                for p in constraint["partition"]:
                    if v in p:
                        list = p
                D[t] = list
            for t in range(len(L)-1):
                if D[t] != D[t+1]:
                    if D[t] != []:
                        C += c_l
    return C

def rolling_window_cost(C,L_body,L_paint,L_assembly):
    for constraint in constraints :
        if constraint['shop']=="body":
            L=L_body
        elif constraint['shop']=="paint":
            L=L_paint
        else:
            L=L_assembly
        if constraint["type"] == "rolling_window": 
            w_r = constraint["window_size"]
            c_r = constraint["cost"]
            Mr = constraint["max_vehicles"]
            for t in range(len(L)-w_r+1):
                S = 0
                for t2 in range(t,t+w_r):
                    if L[t2] in constraint["vehicles"]:
                        S += 1

                C += c_r*(max(0,S-Mr))**2

    return C

def paint_order(parametre_permut_0,L,delta):
    L_entry = L
    L_exit = []
    
    index_entry=parametre_permut_0
    index_exit = []

    two_tone_temp = []
    two_tone_temp_index=[]
    two_tone_temp_time = np.array([])

    
    for i in range(len(L_entry)):
        if len(two_tone_temp_time)>0:
            for k in range(len(two_tone_temp_time)):
                if two_tone_temp_time[0]>=delta-1:

                    L_exit.append(two_tone_temp[0])
                    index_exit.append(two_tone_temp_index[0])
                    two_tone_temp=two_tone_temp[1:]
                    two_tone_temp_time=two_tone_temp_time[1:]
                    two_tone_temp_index=two_tone_temp_index[1:]

        if L[i] == "two-tone":
            two_tone_temp.append(L_entry[i])
            two_tone_temp_time = np.append(two_tone_temp_time,0)
            two_tone_temp_index.append(index_entry[i])
        
        else:
            L_exit.append(L_entry[i])
            index_exit.append(index_entry[i])
            two_tone_temp_time+=1

    L_exit=L_exit+two_tone_temp
    index_exit=index_exit+two_tone_temp_index

    return L_entry, L_exit, index_exit


def batch_size_cost(C,L_body,L_paint,L_assembly):
    for constraint in constraints :
        if constraint['shop']=="body":
            L=L_body
        elif constraint['shop']=="paint":
            L=L_paint
        else:
            L=L_assembly
        if constraint["type"] == "batch_size": 
            vehicles = constraint["vehicles"]
            m_b = constraint["min_vehicles"]
            M_b = constraint["max_vehicles"]
            c_b = constraint["cost"]
            y = [c_b*max(0,m_b-k,k-M_b)**2 for k in range (len(L))]
            for t in range(len(L)-1):
                for t2 in range(t,len(L)):
                    var1 = True
                    if t>1:
                        if L[t-1]  in vehicles:
                            var1 = False
                    var2 = True
                    for t3 in range(t,t2+1):
                        if not L[t3] in vehicles:
                            var2 = False
                    var3 = True
                    if t2<=len(L)-2:
                        if L[t2+1]in vehicles:
                                var3 = False
                    if var1 and var2 and var3:
                        C += y[t2-t]
           
    return C

def main(parametre_permut_0,parametre_permut_1, parametre_permut_2):
    cost=parameters['resequencing_cost']
    C = 0
    for i in range(len(parametre_permut_0)):
        C+= cost*np.maximum(0, parametre_permut_0[i] - lag["body"] - parametre_permut_1[i])

    new_sequence=[]
    for i in parametre_permut_1:
        new_sequence.append(vehicles[parametre_permut_0[i-1]+1])
    after_paint=paint_order(parametre_permut_0,new_sequence,parameters['two_tone_delta'])[2]
    
    for i in range(len(after_paint)) :
        C+= cost*np.maximum(0,  after_paint[i] - lag['paint'] - parametre_permut_2[i])

    L_body=parametre_permut_0
    L_paint=parametre_permut_1
    L_assembly=parametre_permut_2
    C=lot_change_cost(C,L_body,L_paint,L_assembly)
    C=rolling_window_cost(C,L_body,L_paint,L_assembly)
    C=batch_size_cost(C,L_body,L_paint,L_assembly)

    return C,np.array(after_paint)+1, np.array(parametre_permut_0)+1



parametre_permut_0=np.array(list(vehicles.keys()))-1
parametre_permut_1=([i for i in range(1,len(list(vehicles.values()))+1)])

new_sequence=[]
for i in parametre_permut_1:
    new_sequence.append(vehicles[i])
after_paint=paint_order(parametre_permut_0,new_sequence,parameters['two_tone_delta'])[2]



parametre_permut_2=after_paint

#print(parametre_permut_2)



def permutations(L1,L2,L3, N, swap):
    graph = []
    L1p=L1.copy()
    L2p=L2.copy()
    L3p =L3.copy()
    C=main(L1,L2,L3)[0]
    n=0
    while n < N:
        L1=swap(L1p)  # les listes divergent !
        L2=swap(L2p)
        L3=swap(L3p)
        C_temp=main(L1,L2,L3)[0]
        
        graph.append(C_temp)
        if  C_temp < C:
            L1p,L2p,L3p = L1,L2,L3
            C=C_temp
            print(C_temp)
            print(L1p,L2p,main(L1p,L2p,L3p)[1],L3p,C)
        n+=1
    return L1p,L2p,main(L1p,L2p,L3p)[1],L3p,C, graph

def random_swap(L):
    i = np.random.randint(len(L))
    j = np.random.randint(len(L))
    T=L.copy()
    T[i], T[j] = T[j], T[i]
    return T



print(main(parametre_permut_0,parametre_permut_1, parametre_permut_2)[0])

#print(permutations(parametre_permut_0,parametre_permut_1, parametre_permut_2,1000, random_swap))

#print(paint_order(list(vehicles.values()),parameters['two_tone_delta']))
#print(vehicles)


def close_swap(L):
    i = np.random.randint(len(L)-1)
    T=L.copy()
    T[i], T[i+1] = T[i+1], T[i]
    return T


def section_swap(L):
    m = np.random.randint()

#print(permutations(parametre_permut_0,parametre_permut_1, parametre_permut_2,10000, close_swap))

#1064300

def we_cooked_him(L1, L2, L3, alpha, T0, Tfin, N):
    graph = []
    L1p=L1.copy()
    L2p=L2.copy()
    L3p =L3.copy()
    C=main(L1,L2,L3)[0]

    L1_=close_swap(L1p)
    L2_=close_swap(L2p)
    L3_=close_swap(L3p)
    C_ = main(L1_, L2_, L3_)[0]

    if C < C_:
        L1opt = L1p
        L2opt = L2p
        L3opt = L3p
        C_opt = C
        C_test = C_
        L1_test = L1_
        L2_test = L2_
        L3_test = L3_


    else:
        L1opt = L1_
        L2opt = L2_
        L3opt = L3_
        C_opt = C_
        C_test = C
        L1_test = L1p
        L2_test = L2p
        L3_test = L3p

    T = T0
    while T < Tfin:
        if C_test < C_opt:
            L1opt = L1_test
            L2opt = L2_test
            L3opt = L3_test
            C_opt = C_test
            C_test = C_opt
            L1_test = L1opt
            L2_test = L2opt
            L3_test = L3opt
   
        p = np.exp(-(C_test - C_opt)/T)
        for n in range(N):
            if np.random.random() < p:
                L1=close_swap(L1opt)  # les listes divergent !
                L2=close_swap(L2opt)
                L3=close_swap(L3opt)
                C_temp=main(L1,L2,L3)[0]
                if  C_temp <= C_opt:
                    L1opt,L2opt,L3opt = L1,L2,L3
                    C_opt=C_temp
            else:
                L1=close_swap(L1_test)  # les listes divergent !
                L2=close_swap(L2_test)
                L3=close_swap(L3_test)
                C_temp=main(L1,L2,L3)[0]
                if  C_temp <= C_test:
                    L1_test,L2_test,L3_test = L1,L2,L3
                    C_test=C_temp
            graph.append(C_temp)
            print(L1opt,L2opt,main(L1opt,L2opt,L3opt)[1],L3opt,C_opt)
        T*=alpha

    if C_test < C_opt:
        L1opt = L1_test
        L2opt = L2_test
        L3opt = L3_test           
        C_opt = C_test
        C_test = C_opt
        L1_test = L1opt
        L2_test = L2opt
        L3_test = L3opt

    return L1opt,L2opt,main(L1opt,L2opt,L3opt)[1],L3opt,C_opt, graph
        


""" USING CLOSE SWAP WE GET THE GOD SOlUTION !!! 
        
       Small_1: 942700, (array([ 0,  2,  1,  4,  3,  5,  6,  7,  8,  9, 10, 11, 14, 12, 15, 13, 17,
       18, 16, 20, 24, 22, 23, 19, 28, 26, 21, 27, 25, 29, 31, 32, 30, 36,
       33, 37, 35, 34, 40, 38, 39, 41, 43, 42, 47, 44, 45, 46, 48, 49, 53,
       50, 52, 51]),  [1, 2, 5, 3, 6, 7, 4, 8, 9, 12, 11, 10, 13, 14, 16, 17, 18, 15, 19, 21, 23, 20, 22, 24, 25, 26, 27, 28, 29, 30, 35, 31, 33, 34, 38, 36, 39, 32, 37, 41, 42, 44, 40, 43, 45, 46, 48, 50, 47, 49, 52, 51, 53, 54], [ 1,  2,  5,  6,  7,  9, 10, 11, 12, 15, 18, 19, 23, 24, 20, 27, 22,
       28, 30, 32, 34, 38, 41,  3, 39, 40,  4, 42, 44,  8, 43, 48, 46, 47,
       13, 16, 14, 17, 21, 25, 29, 26, 33, 31, 37, 36, 35, 45, 49, 50, 54,
       51, 53, 52], [0, 3, 1, 4, 6, 8, 14, 10, 9, 11, 18, 15, 19, 20, 21, 26, 22, 27, 34, 29, 33, 35, 38, 2, 37, 39, 5, 42, 41, 7, 43, 47, 49, 46, 17, 16, 12, 13, 23, 24, 28, 25, 30, 31, 36, 32, 40, 48, 45, 52, 50, 51, 53, 44], 942700)"""

def minus_one(L):
    T = []
    for i in range(len(L)-1):
        T.append(L[i]-1)
    return T

list_1 = [ 0,  2,  1,  4,  3,  5,  6,  7,  8,  9, 10, 11, 14, 12, 15, 13, 17,
       18, 16, 20, 24, 22, 23, 19, 28, 26, 21, 27, 25, 29, 31, 32, 30, 36,
       33, 37, 35, 34, 40, 38, 39, 41, 43, 42, 47, 44, 45, 46, 48, 49, 53,
       50, 52, 51]
list_2 = [1, 2, 5, 3, 6, 7, 4, 8, 9, 12, 11, 10, 13, 14, 16, 17, 18, 15, 19, 21, 23, 20, 22, 24, 25, 26, 27, 28, 29, 30, 35, 31, 33, 34, 38, 36, 39, 32, 37, 41, 42, 44, 40, 43, 45, 46, 48, 50, 47, 49, 52, 51, 53, 54]
list_3 = [0, 3, 1, 4, 6, 8, 14, 10, 9, 11, 18, 15, 19, 20, 21, 26, 22, 27, 34, 29, 33, 35, 38, 2, 37, 39, 5, 42, 41, 7, 43, 47, 49, 46, 17, 16, 12, 13, 23, 24, 28, 25, 30, 31, 36, 32, 40, 48, 45, 52, 50, 51, 53, 44]

#result = we_cooked_him(parametre_permut_0,parametre_permut_1, parametre_permut_2, 1.1, 100000000000, 200000000000, 100)
#print(result)

result = permutations(parametre_permut_0,parametre_permut_1, parametre_permut_2, 10, close_swap)
print(result)
import matplotlib.pyplot as plt
plt.plot(result[-1])
plt.show()


""" Medium 1  results with 100 iterations of close_swap :
(array([  0,   2,   1,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
        13,  15,  14,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
        27,  26,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
        39,  41,  42,  40,  43,  44,  45,  46,  47,  48,  49,  51,  50,
        52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
        65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
        78,  80,  79,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
        91,  92,  93,  95,  94,  96,  97,  98,  99, 100, 101, 102, 103,
       104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
       117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 126, 128, 129,
       130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
       144, 143, 145, 147, 146, 148, 149, 150, 151, 152, 154, 153, 155,
       156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
       169, 170, 172, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181,
       182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 192, 194,
       195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 204, 206, 207,
       208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
       221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234,
       233, 235, 236, 237, 238, 240, 239, 241, 242, 243, 244, 245, 246,
       247, 248, 249, 250, 252, 251, 253, 254, 255, 256, 257, 258, 259,
       260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273,
       272, 274, 275, 276, 278, 277, 279, 281, 280, 282, 283, 284, 285,
       287, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296]), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 75, 77, 79, 78, 80, 81, 82, 83, 84, 85, 86, 87, 89, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 147, 149, 150, 152, 151, 153, 154, 156, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 195, 197, 198, 199, 200, 201, 203, 204, 202, 205, 207, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 221, 223, 224, 225, 226, 227, 229, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 270, 272, 273, 274, 275, 276, 277, 278, 280, 279, 282, 281, 283, 284, 286, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 296], array([  1,   3,   2,   4,   6,   7,   9,  11,  12,  14,  16,  15,  17,
        19,  21,  22,  24,  26,  28,  27,  30,  31,  35,  36,  37,  38,
        44,  45,  48,  50,  53,  54,  56,  57,  58,  59,  60,  61,  62,
        63,  65,  67,  68,  69,  71,  72,  73,  74,  75,  76,  78,  79,
        81,  80,  82,  83,  84,  85,  87,  88,  89,  91,  94,  96,  95,
        98,  99, 101, 104, 105, 106, 107, 110, 111, 114, 117, 119, 120,
       121, 123, 124, 125, 128, 127, 129, 132, 133, 134, 135, 136, 137,
       138, 139, 140, 141, 142, 143, 145, 146, 149, 152, 153, 154, 159,
       160, 161, 162, 163, 164, 165, 168, 170, 171, 173, 172, 174, 175,
       176,   5, 178, 179,   8, 181,  10, 182, 183,  13, 184, 185, 186,
       187,  18, 189,  20, 190, 194,  23, 193,  25, 195, 196, 198,  29,
       199, 200,  32,  33,  34, 202, 203, 205, 207,  39,  40,  42,  43,
        41, 209, 210,  46,  47, 211,  49, 212,  52,  51, 214, 217,  55,
       218, 219, 222, 224, 225, 226, 228, 229,  64, 231,  66, 232, 233,
       235,  70, 234, 236, 239, 240, 242, 243,  77, 247, 248, 249, 250,
       251, 252, 254, 255,  86, 257, 258, 260,  90, 261,  92,  93, 263,
       264, 265,  97, 266, 268, 100, 271, 102, 103, 272, 273, 275, 276,
       108, 109, 277, 279, 112, 113, 278, 115, 116, 280, 118, 282, 281,
       284, 122, 285, 286, 288, 126, 287, 289, 290, 130, 131, 291, 292,
       293, 294, 295, 297, 144, 148, 147, 150, 151, 155, 156, 157, 158,
       166, 167, 169, 177, 180, 188, 191, 192, 197, 201, 204, 206, 208,
       213, 215, 216, 220, 221, 223, 227, 230, 237, 238, 241, 244, 245,
       246, 253, 256, 259, 262, 267, 269, 270, 274, 283, 296]), [0, 1, 2, 3, 5, 6, 8, 10, 11, 13, 14, 15, 16, 18, 21, 20, 23, 25, 26, 27, 29, 30, 34, 35, 37, 36, 43, 44, 47, 49, 52, 53, 56, 55, 57, 58, 59, 61, 60, 62, 64, 66, 67, 70, 71, 68, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 93, 94, 95, 98, 97, 100, 103, 104, 105, 106, 109, 110, 113, 116, 118, 119, 122, 120, 123, 124, 126, 128, 127, 131, 133, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 148, 150, 155, 152, 158, 159, 160, 162, 161, 163, 164, 167, 169, 170, 171, 172, 173, 174, 175, 4, 177, 178, 7, 180, 9, 181, 182, 12, 183, 184, 185, 186, 17, 188, 19, 189, 192, 22, 193, 24, 194, 197, 195, 28, 198, 199, 31, 32, 33, 203, 202, 204, 206, 38, 39, 40, 41, 42, 208, 209, 45, 46, 210, 48, 211, 50, 51, 213, 216, 54, 217, 218, 220, 223, 224, 225, 227, 228, 63, 230, 65, 231, 233, 232, 69, 234, 235, 238, 239, 241, 242, 76, 246, 247, 248, 249, 250, 251, 253, 254, 85, 256, 257, 259, 89, 260, 91, 92, 263, 262, 264, 96, 265, 267, 99, 269, 102, 101, 271, 272, 274, 275, 107, 108, 277, 276, 111, 112, 278, 114, 115, 279, 117, 280, 281, 283, 121, 284, 285, 286, 125, 287, 288, 289, 129, 130, 290, 291, 292, 293, 294, 295, 143, 146, 147, 149, 151, 154, 153, 156, 157, 165, 166, 168, 176, 179, 187, 190, 191, 196, 201, 200, 205, 207, 212, 214, 215, 219, 221, 222, 226, 229, 236, 237, 240, 243, 244, 245, 252, 255, 258, 261, 266, 268, 270, 273, 282, 296], 14347340, [16825720, 18323740, 14988740, 15118740, 15079440, 15170240, 15030840, 16567740, 15127440, 16364440, 15009740, 14956740, 14970240, 14947640, 16550040, 16398040, 14880240, 16485240, 18199140, 14819240, 14793840, 16343440, 16185840, 16481740, 16396140, 17855740, 14771840, 19543940, 16161840, 17851140, 14775140, 14881940, 14794040, 16379740, 16358840, 14771540, 16390540, 16388440, 14747340, 16295240, 14806340, 16239140, 14753440, 14745460, 14686060, 14731360, 17945960, 14716960, 16213360, 16159500, 16217160, 14684660, 16183940, 16079560, 14804860, 17976660, 16224660, 16284660, 18031360, 19484660, 14670560, 17719560, 16281960, 14670560, 14666560, 14655660, 14722160, 16272360, 17637560, 14663560, 16291900, 16258060, 16432460, 16189760, 14490560, 15878660, 16099560, 17601560, 14490560, 17618160, 16128260, 15990560, 16090560, 16160560, 15910360, 14474560, 14407760, 14367460, 14357440, 14369240, 14517740, 14384940, 15947440, 15952440, 14365940, 16056840, 17545440, 17519840, 14347340, 14347340])

       final value : 14347340

       """

""" Results for medium_2 with 1000 iterations (i guess medium 1 just sucks fucking cock)

(array([  0,   2,   1,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
        13,  15,  14,  16,  17,  18,  20,  19,  21,  22,  23,  24,  25,
        27,  26,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
        39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
        52,  53,  54,  55,  56,  57,  58,  59,  61,  60,  62,  63,  64,
        65,  66,  68,  67,  69,  70,  71,  72,  73,  74,  75,  76,  77,
        78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
        91,  93,  92,  94,  95,  97,  96,  98,  99, 100, 101, 102, 103,
       104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 114, 116,
       117, 118, 119, 120, 121, 123, 122, 124, 125, 126, 127, 129, 128,
       130, 131, 133, 132, 134, 136, 135, 137, 138, 139, 140, 141, 142,
       144, 143, 145, 146, 147, 148, 149, 150, 151, 153, 152, 154, 155,
       156, 157, 158, 159, 160, 162, 163, 164, 161, 166, 165, 167, 169,
       168, 170, 171, 172, 173, 174, 175, 176, 178, 177, 179, 180, 181,
       182, 183, 184, 185, 186, 187, 188, 189, 191, 190, 192, 193, 194,
       196, 195, 197, 198, 199, 200, 201, 202, 204, 203, 205, 206, 207,
       208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 219,
       221, 223, 224, 225, 222, 227, 226, 228, 229, 230, 232, 231, 233,
       234, 236, 235, 237, 238, 240, 239, 242, 241, 243, 245, 244, 246,
       247, 248, 249, 250, 251, 252, 254, 253, 255, 256, 257, 258]), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 33, 34, 36, 35, 37, 38, 39, 41, 40, 42, 43, 44, 45, 46, 48, 47, 49, 50, 51, 52, 53, 54, 55, 57, 56, 58, 59, 60, 61, 62, 63, 64, 66, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 77, 79, 80, 81, 82, 84, 83, 85, 86, 87, 88, 90, 89, 91, 92, 93, 94, 95, 96, 97, 98, 100, 99, 101, 103, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 123, 125, 126, 127, 128, 129, 131, 130, 132, 134, 133, 135, 137, 136, 138, 140, 139, 141, 143, 142, 145, 144, 146, 147, 148, 150, 149, 151, 152, 153, 154, 156, 155, 157, 160, 158, 159, 161, 162, 163, 165, 164, 167, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 188, 190, 192, 191, 193, 194, 195, 196, 197, 198, 200, 199, 201, 202, 203, 204, 205, 206, 208, 207, 210, 209, 213, 211, 212, 214, 215, 216, 217, 218, 219, 221, 220, 222, 223, 224, 226, 225, 228, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 243, 245, 246, 247, 248, 250, 249, 251, 252, 253, 254, 255, 256, 257, 259, 258], array([  4,   5,   6,   7,   8,  10,  14,  18,  21,  20,  23,  25,  26,
        31,  32,  33,  35,  36,  39,  42,  43,  44,  46,  47,  48,  54,
        56,  57,  58,  59,  63,  67,  70,  71,  73,  79,  80,  81,  82,
        86,  87,  88,  89,  90,  91,  92,  95,  99, 100, 101, 102, 103,
       105, 106,   1,   3,   2, 107, 110, 113, 121, 124,   9, 123,  11,
        12,  13, 125,  16,  15,  17, 126,  19, 127, 129,  22, 131,  24,
       135, 139,  28,  27,  29,  30, 141, 148, 150,  34, 151, 152,  37,
        38, 154,  40,  41, 155, 156, 157,  45, 163, 168, 171,  49,  50,
        51,  52,  53, 174,  55, 175, 176, 179, 178,  60,  62,  61, 180,
        64,  65,  66, 181,  69,  68, 182, 186,  72, 188,  74,  75,  76,
        77,  78, 194, 196, 201, 202,  83,  84,  85, 205, 206, 208, 209,
       212, 217, 218,  94,  93, 219,  96,  98,  97, 221, 222, 225, 226,
       228, 104, 227, 229, 230, 108, 109, 231, 111, 112, 241, 114, 116,
       115, 117, 118, 119, 120, 247, 122, 248, 249, 253, 256, 258, 128,
       130, 132, 134, 133, 137, 136, 138, 140, 142, 143, 145, 144, 146,
       147, 149, 153, 158, 159, 160, 161, 164, 165, 162, 167, 166, 170,
       169, 172, 173, 177, 183, 184, 185, 187, 189, 190, 192, 191, 193,
       195, 197, 198, 199, 200, 203, 204, 207, 210, 211, 213, 214, 215,
       216, 220, 224, 223, 233, 232, 234, 235, 237, 236, 238, 239, 240,
       243, 242, 244, 246, 245, 250, 251, 252, 255, 254, 257, 259]), [3, 4, 5, 6, 7, 9, 13, 17, 19, 20, 24, 25, 30, 22, 31, 32, 34, 35, 41, 38, 42, 43, 45, 46, 53, 47, 56, 55, 57, 58, 66, 70, 62, 69, 78, 72, 80, 79, 81, 85, 88, 86, 90, 87, 91, 89, 98, 100, 94, 101, 99, 102, 104, 105, 0, 1, 2, 109, 112, 106, 120, 122, 8, 123, 10, 11, 12, 124, 14, 15, 16, 125, 18, 126, 128, 21, 130, 23, 139, 134, 26, 27, 28, 29, 148, 140, 147, 33, 150, 151, 36, 37, 153, 39, 40, 154, 155, 156, 44, 167, 162, 170, 48, 49, 50, 51, 52, 173, 54, 174, 175, 177, 178, 59, 60, 61, 179, 64, 63, 65, 180, 67, 68, 181, 185, 71, 188, 73, 75, 74, 76, 77, 193, 201, 195, 200, 82, 84, 83, 204, 205, 206, 209, 216, 210, 217, 92, 93, 218, 96, 95, 97, 219, 221, 222, 224, 226, 103, 227, 228, 229, 107, 108, 230, 110, 111, 240, 113, 114, 115, 116, 117, 118, 119, 246, 121, 247, 249, 252, 255, 258, 127, 129, 131, 132, 133, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 152, 157, 158, 159, 160, 161, 163, 164, 165, 166, 169, 171, 172, 168, 182, 176, 183, 186, 184, 187, 189, 190, 191, 197, 192, 194, 196, 198, 199, 202, 203, 207, 208, 212, 211, 214, 213, 215, 220, 223, 225, 231, 232, 233, 234, 235, 237, 236, 238, 239, 241, 242, 244, 243, 245, 250, 248, 251, 253, 256, 254, 257], 5461450, [5904150, 8110550, 5920950, 5904150, 7024150, 5909250, 5904150, 5904150, 7044150, 5904150, 6892150, 7054150, 7999350, 5933150, 5904150, 6957750, 6890550, 6987750, 5898450, 6908850, 5898450, 5902050, 5894850, 8208250, 5894850, 7141450, 5898450, 5894850, 5894850, 5897850, 8051250, 7874850, 6944850, 5876150, 6916150, 7986150, 5872550, 7996150, 5868950, 5876150, 6998950, 7018950, 6975350, 5872550, 5868950, 6905350, 6928950, 6928850, 5876350, 6935350, 5870350, 8022550, 6835350, 7975350, 6975750, 6878950, 6928950, 7982650, 6928950, 5868950, 5868950, 5848550, 6838550, 6905150, 6838550, 5858550, 8195150, 6898550, 5848550, 5848550, 6838550, 5848550, 5858650, 5852150, 6888550, 7020450, 6928550, 5830150, 5830150, 5827150, 5837150, 6957150, 6847150, 6972350, 5840750, 5823550, 8043550, 6883550, 5823550, 5812150, 5832150, 5812150, 5815750, 6932150, 7908650, 5812150, 7965750, 8085750, 5812150, 5812150, 6894550, 5812150, 5812150, 5791550, 7981550, 7905150, 5791550, 6827950, 5791550, 6961550, 6891550, 5787950, 6847950, 5787950, 5787950, 6769250, 5787950, 5787950, 5784350, 5808150, 6819250, 5780750, 5785650, 5784350, 5777150, 6847150, 5777150, 5773550, 5783550, 7913550, 6833550, 6803550, 6867150, 7803650, 5773550, 7943550, 5773550, 6907150, 5773550, 6853550, 7943550, 6928450, 6813350, 6903550, 5782550, 5773550, 5773550, 7963550, 6787150, 5783550, 6979950, 6783550, 6813550, 5769950, 6893550, 7999950, 6809950, 8989950, 5769950, 6893550, 5769950, 5766350, 6867650, 6969950, 6906350, 5766350, 5769950, 5766350, 6816350, 5776450, 6916350, 6809950, 5766350, 5769950, 5766350, 5782750, 6786350, 5776350, 5749550, 6787250, 8029950, 6883150, 6829550, 7979550, 6816250, 6769550, 5759550, 6733250, 6770850, 5749550, 7700000, 6789550, 5759550, 5749550, 6909550, 5769950, 5742950, 5752950, 5756550, 5742950, 5742950, 5773550, 5742950, 5759750, 6896550, 6882950, 5742950, 5756550, 5746550, 6886350, 6802950, 5752950, 5750150, 7942950, 5746550, 6736150, 9162950, 5742950, 5742950, 5746550, 8943350, 6776550, 6732950, 6866550, 7796550, 5742950, 5739350, 5739350, 6832750, 5739350, 6812950, 6739450, 7786350, 5766000, 6889350, 6732550, 6869750, 5739350, 7832550, 6802950, 5749350, 6825750, 6899350, 6779350, 6789350, 5746750, 6845750, 5743150, 5739350, 6839350, 6705750, 6799350, 5759750, 6872950, 5739350, 5745950, 6709350, 7853050, 6759350, 6822950, 5742950, 5739350, 6842550, 5739350, 7869350, 6765950, 5736150, 5736150, 5742550, 6739350, 6849750, 6829750, 5746250, 5739750, 5770350, 5726050, 7796050, 5726250, 5726050, 5726050, 5709050, 5722650, 5709050, 5712650, 5719150, 6792650, 5719050, 5712650, 5709050, 7762650, 7839050, 6689150, 6829050, 8049050, 6815450, 5709050, 5709050, 6832650, 6729050, 5712650, 5705450, 5705450, 6685450, 5715450, 5715450, 5750650, 5691850, 6725450, 6841850, 6741750, 5695450, 6778500, 5701850, 6933850, 6770450, 6751850, 5691850, 6841850, 5696750, 6665450, 5682850, 6746450, 6832850, 7799650, 5695450, 5691350, 5682850, 6832850, 5689450, 7792850, 5682850, 7756050, 5682850, 5686450, 5696450, 6809250, 5682850, 5682850, 6722850, 6733250, 5684250, 5682850, 5682850, 6655950, 5682850, 5686250, 5692850, 5682850, 5692850, 6909450, 7976450, 5686450, 7792850, 6656450, 6832850, 6762850, 5682850, 6679250, 5721650, 5692850, 5699650, 5702650, 6786450, 5682850, 6752850, 5702850, 5689250, 6762850, 5677750, 5677750, 6764150, 5681350, 5677750, 7887750, 5675550, 6709350, 6632200, 6835550, 5702350, 7898750, 6859150, 6751950, 7809150, 6715550, 5698750, 5675550, 6715550, 5675550, 5675550, 5712350, 5679150, 6775550, 5685550, 5685550, 5675550, 5685550, 6801950, 5675550, 5700950, 7819150, 6818950, 7959150, 6715550, 5682750, 5678600, 7899150, 5695950, 6706950, 5675550, 5671950, 5707550, 5671950, 6721950, 5675550, 7911950, 5655150, 6835150, 6845250, 5655150, 5658150, 7898750, 5665150, 6778750, 6805150, 5665150, 6738750, 5668750, 5668750, 5672350, 7845150, 5665150, 5655150, 6698750, 6638350, 5675150, 5658750, 5632550, 5636150, 5694550, 6682550, 5632550, 5636150, 5619350, 5619350, 5636150, 6662950, 5624250, 5628350, 6702950, 5628050, 6819350, 5636050, 7809150, 5639350, 6659350, 5597350, 7686950, 5603750, 5597350, 5600950, 7574050, 6671050, 5597350, 6807350, 6657750, 5607350, 5600950, 6720950, 7647350, 5597350, 6640750, 6730950, 5597350, 5607350, 6681550, 6690950, 6677350, 7584050, 5611050, 6697350, 5607350, 5593750, 6637350, 7673750, 6663750, 5636150, 5603750, 5593750, 5616750, 5613750, 6713750, 5597550, 5576950, 6706950, 6733550, 5578450, 7623750, 6766950, 5580550, 5576950, 5613750, 6626950, 6600550, 5580550, 6752850, 7770550, 6616950, 5576950, 5576950, 7586950, 5586950, 5580350, 6633750, 6756950, 5576950, 6650550, 6546950, 6523650, 5571750, 6625350, 6564950, 5575350, 5592150, 5581750, 7761750, 5581750, 6685350, 5585350, 6561750, 6635350, 5571750, 5581750, 6628150, 6686950, 5571750, 5575550, 6798400, 5578950, 5581750, 5586650, 8838150, 5581750, 7701750, 5575550, 7795350, 5571750, 6695350, 5592150, 6601750, 7611750, 5578950, 5568150, 5571750, 5568150, 5568150, 6671750, 6631750, 6648150, 5568150, 7688150, 6588150, 6761750, 6588150, 6748150, 5584950, 5568150, 5578150, 5588350, 5568150, 5574550, 6748150, 6708150, 6671750, 5578350, 6684550, 7778150, 5568150, 6738150, 5571750, 5568150, 6598150, 6598150, 7781750, 5568150, 6548150, 5568150, 7655350, 5583350, 6544550, 6648550, 6681750, 5568150, 6578250, 6784750, 5581750, 5568150, 6638150, 5571750, 6728150, 5571950, 6571350, 6698150, 5568150, 6588150, 7811750, 5587150, 5568150, 5578150, 5578250, 6551850, 6571350, 6638150, 5571750, 5578150, 7581750, 7677150, 5568150, 5581750, 5561750, 5561750, 6558450, 6611750, 5575350, 6621750, 5561750, 6691750, 5561750, 5563350, 5565350, 7610750, 5561750, 5558150, 6558150, 5558150, 6668150, 5561750, 7771750, 5568150, 5554550, 5558150, 6557750, 5564550, 6718750, 7648150, 5554550, 6604550, 6594550, 6724550, 5554550, 5581350, 7788250, 5564550, 5554550, 6728150, 6701550, 5566050, 8658150, 6634550, 7664550, 5554550, 6574550, 6604550, 6675150, 6718150, 6641150, 5564550, 6618150, 5571150, 5556150, 5554550, 5557950, 5570950, 5554550, 6554550, 5564550, 7664550, 6544550, 6554550, 5571350, 5568150, 6544550, 6520950, 5574550, 6727950, 6494550, 5558150, 5550450, 5564050, 6674050, 6672050, 5570450, 5567250, 5546850, 5563650, 6696850, 6536850, 5560450, 6546850, 6665450, 5546850, 5546850, 5546850, 7580450, 6590450, 5546850, 5529850, 6583450, 5546550, 6633450, 7663350, 6549850, 5533450, 6549850, 5539850, 5533450, 6619850, 5533450, 7663450, 5529850, 5540050, 5539850, 5533450, 5539850, 5529850, 5533450, 5539850, 5529850, 6629850, 6526850, 6593450, 6689850, 6648450, 5529850, 5539850, 5551950, 6663450, 5529850, 5549850, 5539850, 5529850, 6599850, 5529850, 5524650, 6524650, 7628250, 5523250, 6603250, 5506450, 5520050, 5520250, 5526450, 6580050, 5520050, 5522850, 6656450, 7740050, 6486450, 5510050, 6486550, 7646450, 6526450, 5516450, 5506450, 5506450, 5506450, 6656450, 5520050, 6516450, 5506450, 5516450, 5506450, 5506450, 6596450, 5506450, 5516450, 5511650, 6656850, 5526450, 5516750, 6593050, 5523250, 5498050, 5508050, 5501850, 6621650, 8881650, 7628050, 5498050, 5498050, 5514450, 6538050, 6603250, 5518650, 6540050, 5524850, 5508050, 6527950, 6541650, 6628050, 6521150, 7749650, 6501650, 7761650, 5511850, 5494450, 5514450, 6567650, 7504450, 6574450, 5494450, 6594450, 5498050, 5504450, 6558050, 6600850, 5494450, 5504450, 6644450, 5519550, 6534450, 5504450, 5504450, 5498050, 5498050, 6543850, 5494450, 5499350, 5501650, 5504450, 6558050, 5521100, 5499650, 6560850, 6581250, 5494450, 5508150, 5504450, 6460850, 6538050, 5498050, 5514450, 7694450, 5498050, 6591050, 6644450, 5508050, 5494450, 5509650, 7494450, 6684450, 7544450, 7684450, 6557650, 5494450, 6451100, 5498050, 6544450, 5504450, 5504450, 6644450, 5531150, 6671250, 6619650, 6504550, 6451150, 5494450, 5514850, 5494450, 7594550, 5468650, 5478650, 5485350, 6573750, 5468650, 5482250, 6488650, 5475050, 5472050, 5472250, 7521850, 8538650, 5482250, 5478650, 5468650, 6518650, 6448650, 5478900, 6612250, 5468650, 5473450, 6443550, 5480150, 5472250, 7705050, 6642250, 5488850, 5472250, 6535450, 6628650, 5472250, 5468650, 6658650, 6548650, 6568650, 7642250, 6628650, 6618650, 5465050, 5481850, 6605050, 5494250, 6555050, 6455050, 6565050, 6495050, 7795050, 6598650, 6518250, 5465050, 6565650, 5485050, 6561450, 5465050, 6525150, 5475250, 6518650, 6515050, 5461450, 5475050, 6595050, 6467850, 6505050, 5468450, 7615050, 8601450, 7681450, 5461450, 5485150, 6547850, 6414550, 6591450, 5461450, 5461450, 6571450, 5471450, 5466650, 6621450, 5481450, 5461450, 6567850, 5465050, 5461450, 5465050, 8595050, 6458250, 5523450, 5471450, 6678050, 6521450, 5465050, 5471450, 5466350, 5461450, 5461450, 5461450, 6508250, 5494850, 5471450, 6491450, 7761850, 7521350, 6585050, 6475050, 7501450, 7511450, 5475050, 5471450, 5461450, 5471450, 7671450, 5461450, 5471450, 5461450, 6519850, 6575150, 6535050, 5465050, 5465050, 6481750, 5461450, 6565050, 5471450, 5465050, 6441450, 5475050, 5495450, 5492050, 5461450, 5465050, 5461450])

       final result : 5461450

"""

""" Large 1 after some (SMALL) number of iterations (<10)

[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
  36  37  38  39  40  41  42  43  44  45  46  47  48  49  51  50  52  53
  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71
  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89
  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107
 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125
 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143
 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161
 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179
 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197
 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215
 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233
 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251
 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269
 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287
 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305
 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323
 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341
 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359
 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377
 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395
 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413
 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431
 432 433 434 435 436 437 438 440 439 441 442 443 444 445 447 446 448 449
 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467
 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485
 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503
 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521
 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539
 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557
 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575
 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593
 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611
 612 613 614 615 616 617 618 619] [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620] [  3   4   6   7   9  10  11  13  16  18  19  21  22  23  25  26  28  29
  30  31  32  33  34  35  36  38  39  40  41  42  45  46  48  50  52  51
  53  55  56  58  60  61  62  67  68  70  71  72  73  74  75  76  77  78
  79  80  82  89  90  91  93  94  95 100 101 105 106 107 108 113 114 118
 120 122 123 124 126 127 128 130 132 133 134 135 136 137 139 140 143 144
 145 147 148 149 150 154 155 156 157 158 159 160 161 162 163 164 166 167
 168 170 171 172 173 175 176 177 178 180 181 182 184 185 186 187 188 189
 192 193 194 195 196 197 198 199 202 203 204 205 206 207 211 213 214 215
 218 219 220 221 222 223 224 225 226 227 231 232 233 234 237 238 240 241
 242 243 244 245 250 251 252 253 254 259 261 262 264 265 266 267 268 270
 272 274 275 276 277 278 279 280 281 282 284 285 286 287 288 289 293 294
 295 296 297 298 299 301 303 304 306 307 310 311 312 313 315 316 317 319
 322 323 325 326 327 329 332 333 336 337 339 343 344 345 346 348 349 351
   1   2 352 353   5 354 356   8 357 358 359  12 360  14  15 362  17 363
 364  20 365 366 367  24 368 369  27 370 372 375 376 379 381 382 383 384
  37 385 387 389 390 391  43  44 394 395  47 396  49 397 398 399 400  54
 401 402  57 403  59 407 408 409  63  64  65  66 413 416  69 418 419 420
 421 422 423 424 425 426 427 430  81 431  83  84  85  86  87  88 432 435
 436  92 437 438 439  96  97  98  99 441 440 102 103 104 443 445 448 447
 109 110 111 112 449 450 115 116 117 451 119 453 121 454 455 459 125 460
 461 463 129 464 131 466 467 468 470 474 475 138 476 477 141 142 479 481
 482 146 484 485 487 488 151 152 153 489 490 492 493 494 495 497 498 499
 500 502 165 504 507 508 169 509 511 512 513 174 514 516 517 521 179 525
 526 527 183 528 529 530 532 535 536 190 191 537 538 539 541 542 545 547
 548 200 201 549 551 552 554 555 557 208 209 210 558 212 560 561 563 216
 217 564 565 566 568 569 570 572 573 574 575 228 229 230 576 577 578 579
 235 236 580 581 239 582 585 586 588 590 591 246 247 248 249 592 593 596
 598 600 255 256 257 258 601 260 602 605 263 608 609 610 611 612 269 614
 271 615 273 616 617 618 619 620 283 290 291 292 300 302 305 308 309 314
 318 320 321 324 328 330 331 334 335 338 340 341 342 347 350 355 361 371
 373 374 377 378 380 386 388 392 393 404 405 406 410 411 412 414 415 417
 428 429 433 434 442 444 446 452 456 457 458 462 465 469 471 472 473 478
 480 483 486 491 496 501 503 505 506 510 515 518 519 520 522 523 524 531
 533 534 540 543 544 546 550 553 556 559 562 567 571 583 584 587 589 594
 595 597 599 603 604 606 607 613] [2, 3, 5, 6, 8, 9, 10, 12, 15, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 44, 45, 47, 49, 50, 51, 52, 54, 55, 57, 59, 60, 61, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 88, 89, 90, 92, 93, 94, 99, 100, 104, 105, 106, 107, 112, 113, 117, 119, 121, 122, 123, 125, 126, 127, 129, 131, 132, 133, 134, 135, 136, 138, 139, 142, 143, 144, 146, 147, 148, 149, 153, 154, 155, 156, 157, 159, 158, 160, 161, 162, 163, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 183, 184, 185, 187, 186, 188, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 210, 212, 213, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 236, 237, 239, 240, 241, 242, 243, 244, 249, 250, 251, 252, 253, 258, 260, 261, 263, 264, 265, 266, 267, 269, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 292, 293, 294, 295, 296, 297, 298, 300, 302, 303, 305, 306, 309, 310, 311, 312, 314, 315, 316, 318, 321, 322, 324, 325, 326, 328, 331, 332, 335, 336, 338, 341, 343, 344, 345, 347, 348, 350, 0, 1, 352, 351, 4, 353, 355, 7, 356, 357, 358, 11, 359, 13, 14, 361, 16, 362, 363, 19, 364, 365, 366, 23, 367, 368, 26, 369, 371, 374, 375, 378, 380, 381, 382, 383, 36, 384, 386, 388, 389, 390, 42, 43, 393, 394, 46, 395, 48, 396, 397, 398, 399, 53, 400, 401, 56, 402, 58, 406, 407, 408, 62, 63, 64, 65, 412, 415, 68, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 429, 80, 430, 82, 83, 84, 85, 86, 87, 431, 434, 435, 91, 436, 437, 438, 95, 96, 97, 98, 439, 440, 101, 102, 103, 442, 444, 446, 447, 108, 109, 110, 111, 448, 449, 114, 115, 116, 450, 118, 452, 120, 453, 454, 458, 124, 459, 460, 462, 128, 463, 130, 465, 466, 467, 469, 473, 474, 137, 475, 476, 140, 141, 478, 480, 481, 145, 483, 484, 486, 487, 150, 151, 152, 488, 489, 491, 492, 493, 494, 496, 497, 498, 499, 501, 164, 503, 506, 507, 168, 508, 510, 511, 512, 173, 513, 515, 516, 520, 178, 524, 525, 526, 182, 527, 528, 529, 531, 534, 535, 189, 190, 536, 537, 538, 540, 541, 544, 546, 547, 199, 200, 548, 550, 551, 553, 554, 556, 207, 208, 209, 557, 211, 559, 560, 562, 215, 216, 563, 564, 565, 567, 568, 569, 571, 572, 573, 574, 227, 228, 229, 575, 576, 577, 578, 234, 235, 579, 580, 238, 581, 584, 585, 587, 589, 590, 245, 246, 247, 248, 591, 592, 595, 597, 599, 254, 255, 256, 257, 600, 259, 601, 604, 262, 607, 608, 609, 610, 611, 268, 613, 270, 614, 272, 615, 616, 617, 618, 619, 282, 289, 290, 291, 299, 301, 304, 307, 308, 313, 317, 319, 320, 323, 327, 329, 330, 333, 334, 337, 339, 340, 342, 346, 349, 354, 360, 370, 372, 373, 376, 377, 379, 385, 387, 391, 392, 403, 404, 405, 409, 410, 411, 413, 414, 416, 427, 428, 432, 433, 441, 443, 445, 451, 455, 456, 457, 461, 464, 468, 470, 471, 472, 477, 479, 482, 485, 490, 495, 500, 502, 504, 505, 509, 514, 517, 518, 519, 521, 522, 523, 530, 532, 533, 539, 542, 543, 545, 549, 552, 555, 558, 561, 566, 570, 582, 583, 586, 588, 593, 594, 596, 598, 602, 603, 605, 606, 612] 28330830

 final result (probably): 28330830

MAY BE UPDATED LATER

"""
